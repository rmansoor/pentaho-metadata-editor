<project name="Pentaho Metadata Editor" default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
	      Pentaho Metadata Editor build file.
    </description>

  <tstamp prefix="start" />

  <!-- system properties to use -->
  <property file="override.properties" />
  <property file="build.properties" />
  <property file="build-res/version.properties" />
  <property name="cr" value="${line.separator}" />

  <!-- set global properties for this build -->
  <property name="stage.dir" location="${basedir}/stage" />
  <property name="libext" location="${stage.dir}/libext" />
  <property name="libswt" location="${stage.dir}/libswt" />

  <property name="docs" location="docs" />
  <property name="jdbc" location="jdbc" />
  <property name="simple-jndi" location="simple-jndi" />
  <property name="samples" location="samples" />
  <property name="driver-lib.dir" location="${libext}/JDBC" />

  <property name="productId" value="pme" />
  <property name="package.basename" value="${productId}-ce-${project.revision}" />

  <property name="javadoc.zip.filename"
  			value="${package.basename}-javadoc.zip"/>
  <property name="javadoc.tar.filename"
  			value="${package.basename}-javadoc.tar.gz"/>
  <property name="source.zip.filename"
  			value="${package.basename}-sources.zip"/>
  <property name="source.tar.filename"
  			value="${package.basename}-sources.tar.gz"/>
  <property name="javadoc.packagenames"
	        value="org.pentaho.*"/>
  <property name="package.root.dir"
            value="${ivy.artifact.id}"
            description="Root directory of final zip or tar package" />
  <!--<property name="system.dir" value="${stage.dir}/${package.root.dir}/system" />-->
  <property name="system.dir" value="${stage.dir}/system" />

  <property name="package.resdir" value="${basedir}/package-res" />

	<!-- Plugin resolve dir -->
	<property name="resolve-plugins.dir" value="${stage.dir}/plugins" />

	<!-- SWT Library Directory -->
	<property name="swtlib.dir" value="libswt" />

  <!-- Define the default location of the common build file -->
  <property name="common.build.file"
            value="./build-res/subfloor.xml"
            description="This is the location of the standardized build-res/subfloor.xml file" />

  <!-- Import the build-res/subfloor.xml file which contains all the default tasks -->
  <import file="${common.build.file}" />
	
  <import file="build-res/subfloor-pkg.xml"/>

  <target name="clean-all" depends="clean-stage,clean,clean-jars">
    <delete dir="${libext}" />
    <delete dir="${swtlib.dir}" />
    <delete dir="${resolve-plugins.dir}" />
  </target>

  <target name="clean-stage">
    <delete dir="${stage.dir}" />
  </target>

  <target name="clean-plugins">
  	<delete dir="${resolve-plugins.dir}" />
  </target>

  <path id="cp-meta">
    <fileset dir="${libext}" includes="**/*.jar" />
  </path>

  <!-- override compile.compile to include custom classpath and do resource copying -->
  <target name="compile.compile" depends="init">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}"
    	encoding="iso-8859-1">
      <classpath>
        <path refid="classpath" />
        <path refid="cp-meta" />
      </classpath>
      <src path="${src.dir}" />
    </javac>

    <!-- a better approach is to move these resources to a "res" directory which will include them automatically in the dist -->
    <echo>Copying images etc to classes directory...</echo>
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.gif **/*.png **/*.xml **/*properties" />
    </copy>
  </target>

  <!-- override javadoc target to include custom classpath -->
  <target name="javadoc" depends="javadoc.init, compile">
    <javadoc destdir="${javadoc.dir}/docs/api"
             access="public"
             source="1.5"
             use="true"
             notree="false"
             nonavbar="false"
             noindex="false"
             splitindex="true"
             author="true"
             version="true"
             maxmemory="256M"
             nodeprecatedlist="false"
             nodeprecated="false"
             packagenames="${javadoc.packagenames}"
             sourcepath="${src.dir}"
             doctitle="${impl.title} documentation">
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      <classpath refid="classpath" />
      <classpath refid="cp-meta" />
    </javadoc>
  </target>

  <!-- Resolve all default items plus JDBC drivers -->
  <target name="resolve" depends="subfloor.resolve,resolve-drivers,resolve-plugins,resolve-pentaho-system"/>

  <!-- Resolve JDBC Drivers into libext/JDBC -->
  <target name="resolve-drivers" depends="resolve-init" description="Retrieves runtime configuration dependencies">
      <ivy:resolve file="${ivy.artifact.ivyfilename}" conf="default"/>
      <ivy:retrieve conf="drivers" pattern="${driver-lib.dir}/[module]-[revision](-[classifier]).[ext]"/>
  </target>

  <!-- Resolve plugin configuration into ${resolve-plugins.dir} -->
  <target name="resolve-plugins" depends="install-ivy">
	<ivy:resolve file="${ivyfile}" conf="plugin" />
	<ivy:retrieve conf="plugin" pattern="${resolve-plugins.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

	
  <target name="resolve-oss-licenses" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="oss-licenses" />
    <ivy:retrieve conf="oss-licenses" pattern="${bin.dir}/[module].[ext]" />
  </target>

  <target name="assemble" depends="" description="copy jar file to distribution directory">
    <copy todir="${stage.dir}">
      <fileset dir="." includes="releasenotes.txt" excludes="**/build, **/dist" />
    </copy>

    <copy todir="${stage.dir}" overwrite="true">
      <fileset dir="${package.resdir}" />
    </copy>

    <unzip src="${bin.dir}/oss-licenses.zip" dest="${stage.dir}">
      <patternset>
        <include name="PentahoMetadata_OSS_Licenses.html"/>
      </patternset>
    </unzip>

    <!-- external libs (jdbc etc) -->
    <mkdir dir="${stage.dir}" />
  	<mkdir dir="${stage.dir}/libext"/>
    <copy todir="${stage.dir}/libext">
      <fileset dir="${libext}" includes="**/*.jar **/*.zip" excludes="**/.vpn" />
    </copy>

    <!-- Move the hive-jdbc driver into the appropriate directory.  It is resolved with the default
         config so transitives end up in libext -->
    <copy todir="${stage.dir}/libext/JDBC">
      <fileset dir="${lib.dir}" includes="**/*hive-jdbc*.jar" />
    </copy>

  	<!-- Install Kettle plugins -->
  	<property name="stage.plugins.dir" value="${stage.dir}/plugins" />
  	<mkdir dir="${stage.plugins.dir}" />
  	<unzip dest="${stage.plugins.dir}" overwrite="true">
        <fileset file="${resolve-plugins.dir}/*.zip" />
  	</unzip>

    <!-- Specifically for the PDI Data Service Plugin -->
    <copy todir="${stage.plugins.dir}" verbose="true" >
      <fileset dir="${resolve-plugins.dir}" >
        <include name="pdi-dataservice-client-plugin*.jar" />
      </fileset>
    </copy>

    <chmod file="${stage.dir}/Metadata Editor.app/Contents/MacOS/JavaApplicationStub" perm="ugo+rx"/>

    <!-- documentation -->
    <!--
		<mkdir dir="${stage.dir}/docs" />

		<copy todir="${stage.dir}/docs">
			<fileset dir="${docs}" includes="**/*.pdf **/*.htm **/*.html **/*.png **/*.PNG **/*.swf **/cn_ZN.zip" excludes="**/*.dot **/*.doc **/*.sxw **/*.odt **/*.vpn **/*feature list*" />
		</copy>
		-->
  </target>

  <target name="-init-assemble">
    <echo>Construct the distribution package...</echo>
    <!-- root directory -->
    <mkdir dir="${stage.dir}" />
  </target>

  <target name="-stage-dist-lib">
    <!-- base lib -->
    <mkdir dir="${stage.dir}/lib" />
    <copy todir="${stage.dir}/lib" file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
  </target>

  <target name="-stage-pentaho-libs">
    <!-- pentaho libs -->
    <mkdir dir="${stage.dir}/libext" />
    <copy todir="${stage.dir}/libext/pentaho">
      <fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/*hive-jdbc*" />
    </copy>
  </target>

  <target name="package-zip">
    <zip destfile="${dist.dir}/${package.basename}.zip">
      <zipfileset dir="${stage.dir}" prefix="metadata-editor" filemode="755">
        <include name="**/*.sh" />
      	<include name="**/*.command" />
        <include name="**/**JavaApplicationStub" />
      </zipfileset>
      <zipfileset dir="${stage.dir}" prefix="metadata-editor">
        <include name="**/*" />
        <exclude name="**/*.sh" />
      	<exclude name="**/*.command" />
        <exclude name="**/**JavaApplicationStub" />
        <exclude name="**/Thumbs.db" />
      </zipfileset>
    </zip>
  </target>

  <target name="package" depends="assemble,package-zip" />

  <!-- override dist target so it does assembly and packaging as well -->
  <target name="dist" depends="jar, package" />



   <!--=======================================================================
      generate.manifest

      Creates a new manifest file if one is not specified, or updates
      an existing manifest file if one is specified.
      Overriding this target in subfloor.xml to address BISERVER-10516
      ====================================================================-->
        <target name="generate.manifest" depends="init,set-build.id">
            <delete file="${dist.manifest.file}" />
            <touch file="${dist.manifest.file}" />
            <copy file="${manifest.file}" tofile="${dist.manifest.file}" overwrite="true" failonerror="false" />

            <manifest file="${dist.manifest.file}" mode="update">
                      <attribute name="Implementation-Title" value="${impl.title}" />
                      <attribute name="Implementation-Version" value="${project.revision}${build.id}" />
                      <attribute name="Implementation-Vendor" value="${impl.vendor}" />
                      <attribute name="Implementation-ProductID" value="${impl.productID}" />
            </manifest>
          </target>

    <!--=======================================================================
      set-build.id

      Overriding this target in subfloor.xml to address BISERVER-10516
      ====================================================================-->
        <target name="set-build.id" unless="build.id" depends="install-antcontrib">
            <if>
                  <istrue value="${release}" />
            <then>
                  <property name="build.id" value="" />
            </then>
            <else>
                  <property name="build.id" value=".development" />
            </else>
            </if>
          </target>

  	<!-- jmeter properties -->
  	<property name="jmeter.home" value="${basedir}/jmeter" description="jmeter installation location" />
    <property name="jmeter.version" value="2.11" description="version of jmeter to use" />
    <property name="jmeter.url" value="http://apache.cs.utah.edu/jmeter/binaries/apache-jmeter-${jmeter.version}.zip" description="URL to download jmeter from"/>
    <property name="jmeter.zip" value="${jmeter.home}/jmeter.zip"/>
    <property name="jmeter.output.dir" value="${bin.dir}/reports/jmeter" description="Base directory that holds all jmeter result files" />


    <!-- ===================================================================
    jmeter.download-check

    checks to see if jmeter is available or not
    ======================================================================== -->
    <target name="jmeter.download-check" description="checks if files have already been downloaded">
      <condition property="jmeter.exists">
        <and>
          <available file="${jmeter.home}/apache-jmeter-${jmeter.version}" type="dir" />
        </and>
      </condition>
    </target>

    <!-- ===================================================================
        jmeter.install

        downloads and unzips jmeter from sourceforge.
        ivy/maven resolution doesn't work well.
        only a really old version of jmeter is available.
        the jmeter ant task requires a "home" location of a jmeter install,
        the ivy/maven artifacts aren't a complete install.  So we download it
        from sourceforge and unzip it in a known location.
    ======================================================================== -->
    <target name="jmeter.install" description="download and install jmeter" depends="jmeter.download-check" unless="jmeter.exists">
      <mkdir dir="${jmeter.home}"/>
      <get src="${jmeter.url}" dest="${jmeter.zip}" usetimestamp="true" />
      <unzip src="${jmeter.zip}" dest="${jmeter.home}" />
      <delete file="${jmeter.zip}" />
    </target>

    <!-- ===================================================================
        jmeter.run-tests
    ======================================================================== -->
    <target name="jmeter.run-tests" description="execute included jmeter script" depends="jmeter.install, resolve">

      <delete dir="${jmeter.output.dir}"/>
      <mkdir dir="${jmeter.output.dir}"/>

      <copy todir="${jmeter.home}/apache-jmeter-${jmeter.version}/lib">
        <fileset dir="lib">
          <include name="**/jersey*.jar"/>
        </fileset>
      </copy>

      <!-- ===================================================================
          taskdef jmeter

          Use the bundled jmeter ant task to execute test
      ======================================================================== -->
      <taskdef name="jmeter"
        classpath="${jmeter.home}/apache-jmeter-${jmeter.version}/extras/ant-jmeter-1.1.1.jar"
        classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask" />

      <jmeter
        jmeterhome="${jmeter.home}/apache-jmeter-${jmeter.version}"
        testplan="test-res/${ivy.artifact.id}-jmeter.jmx"
        resultlog="${jmeter.output.dir}/${ivy.artifact.id}-jmeter.jtl">
          <property name="run.server" value="${jmeter.run.server}" />
          <property name="run.port" value="${jmeter.run.port}" />
      </jmeter>

    </target>

    	<!--=======================================================================
        resolve-swtlibs

        Resolved the swtlibs configuration from ivy.xml
    =====================================================================-->
  	<target name="resolve-swtlibs" depends="install-ivy">
	    <delete dir="${swtlib.dir}" />
    	<ivy:resolve file="${ivyfile}" conf="test" />
  	  <ivy:retrieve conf="swtlibs" pattern="${swtlib.dir}/[module]-[revision](-[classifier]).[ext]" />
	  </target>

	  <target name="unzip-swtlibs">
			<!-- Unzip the libswt package into the libswt folder of the distribution -->
	    <unzip dest="${stage.dir}" overwrite="true">
  	    <fileset dir="${swtlib.dir}">
    	    <include name="**/*.zip"/>
      	</fileset>
	    </unzip>
  	</target>

    <target name="resolve-launcher" depends="install-ivy">
      <ivy:resolve file="${ivyfile}" conf="launcher" />
      <ivy:retrieve conf="launcher" pattern="${stage.dir}/launcher/[module].[ext]" />
    </target>

    <target name="resolve-pentaho-system" depends="install-ivy">
	  <ivy:resolve file="${ivyfile}" conf="pentaho-system" />
	  <ivy:retrieve conf="pentaho-system" pattern="${system.dir}/[module].[ext]" />
		<for param="system">
		  <path id="system-list">
			<fileset dir="${system.dir}">
				<include name="*.zip"/>
			</fileset>
		  </path>
          <sequential>
            <unzip src="@{system}" dest="${system.dir}" overwrite="true"/>
            <delete file="@{system}"/>
          </sequential>
        </for>
      <move file="${system.dir}/pentaho-karaf-assembly" tofile="${system.dir}/karaf" />
    </target>
</project>
